[gd_scene load_steps=10 format=2]

[ext_resource path="res://resources/art/tileset.png" type="Texture" id=1]
[ext_resource path="res://resources/art/twinkle_anim/spritesheet.png" type="Texture" id=2]
[ext_resource path="res://resources/art/player_anims/spritesheet.png" type="Texture" id=3]

[sub_resource type="TileSet" id=1]
0/name = "tile1.png 0"
0/texture = ExtResource( 1 )
0/tex_offset = Vector2( 0, 0 )
0/modulate = Color( 1, 1, 1, 1 )
0/region = Rect2( 0, 0, 32, 32 )
0/tile_mode = 0
0/occluder_offset = Vector2( 0, 0 )
0/navigation_offset = Vector2( 0, 0 )
0/shapes = [  ]
0/z_index = 0
1/name = "tile1.png 1"
1/texture = ExtResource( 1 )
1/tex_offset = Vector2( 0, 0 )
1/modulate = Color( 1, 1, 1, 1 )
1/region = Rect2( 32, 0, 32, 32 )
1/tile_mode = 0
1/occluder_offset = Vector2( 0, 0 )
1/navigation_offset = Vector2( 0, 0 )
1/shapes = [  ]
1/z_index = 0
2/name = "tile1.png 2"
2/texture = ExtResource( 1 )
2/tex_offset = Vector2( 0, 0 )
2/modulate = Color( 1, 1, 1, 1 )
2/region = Rect2( 64, 0, 32, 32 )
2/tile_mode = 0
2/occluder_offset = Vector2( 0, 0 )
2/navigation_offset = Vector2( 0, 0 )
2/shapes = [  ]
2/z_index = 0
3/name = "tile1.png 3"
3/texture = ExtResource( 1 )
3/tex_offset = Vector2( 0, 0 )
3/modulate = Color( 1, 1, 1, 1 )
3/region = Rect2( 0, 32, 32, 32 )
3/tile_mode = 0
3/occluder_offset = Vector2( 0, 0 )
3/navigation_offset = Vector2( 0, 0 )
3/shapes = [  ]
3/z_index = 0
4/name = "tile1.png 4"
4/texture = ExtResource( 1 )
4/tex_offset = Vector2( 0, 0 )
4/modulate = Color( 1, 1, 1, 1 )
4/region = Rect2( 32, 32, 32, 32 )
4/tile_mode = 0
4/occluder_offset = Vector2( 0, 0 )
4/navigation_offset = Vector2( 0, 0 )
4/shapes = [  ]
4/z_index = 0
5/name = "tile1.png 5"
5/texture = ExtResource( 1 )
5/tex_offset = Vector2( 0, 0 )
5/modulate = Color( 1, 1, 1, 1 )
5/region = Rect2( 64, 32, 32, 32 )
5/tile_mode = 0
5/occluder_offset = Vector2( 0, 0 )
5/navigation_offset = Vector2( 0, 0 )
5/shapes = [  ]
5/z_index = 0
6/name = "tile1.png 6"
6/texture = ExtResource( 1 )
6/tex_offset = Vector2( 0, 0 )
6/modulate = Color( 1, 1, 1, 1 )
6/region = Rect2( 0, 64, 32, 32 )
6/tile_mode = 0
6/occluder_offset = Vector2( 0, 0 )
6/navigation_offset = Vector2( 0, 0 )
6/shapes = [  ]
6/z_index = 0
7/name = "tileset.png 7"
7/texture = ExtResource( 1 )
7/tex_offset = Vector2( 0, 0 )
7/modulate = Color( 1, 1, 1, 1 )
7/region = Rect2( 32, 64, 32, 32 )
7/tile_mode = 0
7/occluder_offset = Vector2( 0, 0 )
7/navigation_offset = Vector2( 0, 0 )
7/shapes = [  ]
7/z_index = 0
8/name = "tileset.png 8"
8/texture = ExtResource( 1 )
8/tex_offset = Vector2( 0, 0 )
8/modulate = Color( 1, 1, 1, 1 )
8/region = Rect2( 64, 64, 32, 32 )
8/tile_mode = 0
8/occluder_offset = Vector2( 0, 0 )
8/navigation_offset = Vector2( 0, 0 )
8/shapes = [  ]
8/z_index = 0

[sub_resource type="GDScript" id=2]
script/source = "extends TileMap

var Boulder = preload(\"res://levels/lvl_template/Boulder.tscn\")
var obstacles = [1,2] # tileid of obstacles (that upon which a boulder cannot be pushed)

signal victory
signal defeat
signal pyrrhic_victory
signal player_moved
signal bouldpush
signal knock

enum {NONE, UP, DOWN, LEFT, RIGHT}
const dir_to_displacement_vec = {
	NONE  : Vector2(),
	UP    : Vector2(0,-1),
	DOWN  : Vector2(0,1),
	LEFT  : Vector2(-1,0),
	RIGHT : Vector2(1,0),
	}

# Called when the node enters the scene tree for the first time.
func _ready():
	
	# put boulders in all the peuptiles
	for cell in (get_used_cells_by_id(3)+get_used_cells_by_id(7)): # peuptile
		var beuld = Boulder.instance()
		if cell in get_used_cells_by_id(3):
			beuld.change_bould_type(\"c\")
		elif cell in get_used_cells_by_id(7):
			beuld.change_bould_type(\"t\")
		$Boulders.add_child(beuld)
		beuld.position = map_to_world(cell) + get_cell_size()/2
		set_cellv(cell, 0) # convert floor to regular floor once initial boulder has been placed
		
	# put player in start position
	for cell in get_used_cells_by_id(6): # player start tile
		$Player.position = map_to_world(cell) + get_cell_size()/2
		set_cellv(cell, 0)
	
func get_boulds_here(map_pos): # returns a list containing the boulders at a position
	var beulds = []
	for beuld in $Boulders.get_children():
		if beuld.is_topside and world_to_map(beuld.position) == map_pos: beulds.append(beuld) # adds any boulders there to beulds
	return beulds # return beulds (it should be empty if no boulder, and have the one boulder if there is one)

func check_victory(): # checks for victory, and sends victory signal if so
	for beuld in $Boulders.get_children():
		if beuld.is_topside == true: return false
	if $Player.is_healthy: emit_signal(\"victory\")
	return true
	
func attempt_bouldrop(bould): # drops a boulder if it's on a hole
	var tile_type = get_cellv(world_to_map(bould.position))
	if (bould.bould_type == \"c\" and tile_type == 4) or (bould.bould_type == \"t\" and tile_type == 8): # correctly shapred hole
		bould.knock_bould()
		emit_signal(\"knock\")
		check_victory() # check for victory every time a bould is knocked

func push_bould(bould,dir): # moves bould in a certain direction, or returns false if it can't
	if bould.is_topside:
		var dest_coord = world_to_map(bould.position) + dir_to_displacement_vec[dir]
		var dest_type = get_cellv(dest_coord)
		if (not dest_type in obstacles) and (get_boulds_here(dest_coord).size()) == 0:
			match dir:
				RIGHT: bould.rotate_bould(1)
				LEFT: bould.rotate_bould(-1)
			emit_signal(\"bouldpush\")
			bould.position = map_to_world(dest_coord)+cell_size/2
			attempt_bouldrop(bould)
			return true
	return false
					
# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
	#pass
"

[sub_resource type="GDScript" id=3]
script/source = "extends Node2D

export var is_healthy = true

enum {NONE, UP, DOWN, LEFT, RIGHT}
const dir_to_displacement_vec = {
	NONE  : Vector2(),
	UP    : Vector2(0,-1),
	DOWN  : Vector2(0,1),
	LEFT  : Vector2(-1,0),
	RIGHT : Vector2(1,0),
	}

# Called when the node enters the scene tree for the first time.
func _ready():
	$PlayerSprite.frame=0
	is_healthy = true

func play_movement_animation(direction): # plays movement animation in certain direction
	match direction:
		RIGHT:
			$PlayerAnimations.play(\"horizontal\")
		LEFT:
			$PlayerAnimations.play_backwards(\"horizontal\")
		UP:
			$PlayerAnimations.play(\"vertical\")
		DOWN:
			$PlayerAnimations.play_backwards(\"vertical\")

# Returns a direction if there was movement or NONE if not
func check_for_move_action(): # connects key to movement direction
	var direction = NONE # move direction
	if Input.is_action_just_pressed(\"ui_right\"):
		direction = RIGHT
	elif Input.is_action_just_pressed(\"ui_left\"):
		direction = LEFT
	elif Input.is_action_just_pressed(\"ui_up\"):
		direction = UP
	elif Input.is_action_just_pressed(\"ui_down\"):
		direction = DOWN
	return direction

func complete_move(direction_vec):
	position = get_parent().map_to_world( get_parent().world_to_map(position) + direction_vec ) + get_parent().cell_size/2
	get_parent().emit_signal(\"player_moved\")

func attempt_move(direction):
	var direction_vec = dir_to_displacement_vec[direction]
	var dest_coord = get_parent().world_to_map(position) + direction_vec # dest_coord stores the MAP coordinates of the destination
	var dest_type = get_parent().get_cellv(dest_coord) # dest_type stores the tile id of the destination tile
	var no_tile_obstacle = false
	match dest_type:
		1: # wall
			pass
		2: # spike
			deflate() # deflates player
		4: # hole
			complete_move(direction_vec)
			fall() # ...much to the player's peup :D
		_:
			no_tile_obstacle = true
	if(no_tile_obstacle):
		var beuld = get_parent().get_boulds_here(dest_coord) # the list of boulders in the destination
		if beuld.size() > 0: # if there is a boulder there...
			if get_parent().push_bould(beuld[0],direction): # ...and, if the boulder is pushed...
				complete_move(direction_vec) # ...then movement occurs!
		else: # on the other hand, if no boulder...
			complete_move(direction_vec) # ...movement occurs!
			
func peuped(): # player's health has been compromised
	is_healthy = false
	if get_parent().check_victory():
		get_parent().emit_signal(\"pyrrhic_victory\") # if peuped after won
	else:
		get_parent().emit_signal(\"defeat\") # emits defeat signal from TileMap
	

func deflate(): # deflates player
	$PlayerAnimations.stop()
	$PlayerSprite.rotation_degrees=0
	$PlayerSprite.frame = 1
	peuped()
	
func fall(): # fells player
	$PlayerAnimations.play(\"fall\")
	get_parent().emit_signal(\"knock\")
	peuped()
	
# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	if is_healthy : 
		var direction = check_for_move_action()
		if direction != NONE :
			play_movement_animation(direction)
			attempt_move(direction)
"

[sub_resource type="Animation" id=4]
resource_name = "fall"
length = 1.3
tracks/0/type = "value"
tracks/0/path = NodePath("PlayerSprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1.1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 0, 0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("PlayerSprite:scale")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 1, 1 ), Vector2( 0, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("PlayerSprite:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("TwinkleSprite:visible")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.9, 1.3 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ false, true, false ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("TwinkleSprite:frame")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0.9, 1.1, 1.3 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 0 ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("PlayerSprite:rotation_degrees")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0, 1.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 0.0 ]
}

[sub_resource type="Animation" id=5]
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath("PlayerSprite:rotation_degrees")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 90.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("PlayerSprite:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 0, 0 ]
}

[sub_resource type="Animation" id=6]
tracks/0/type = "value"
tracks/0/path = NodePath("PlayerSprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 4, 7 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("PlayerSprite:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 0.0 ]
}

[node name="TileMap" type="TileMap"]
tile_set = SubResource( 1 )
cell_size = Vector2( 32, 32 )
format = 1
tile_data = PoolIntArray( 0, 1, 0, 1, 1, 0, 2, 1, 0, 3, 1, 0, 4, 1, 0, 5, 1, 0, 6, 5, 0, 7, 5, 0, 8, 1, 0, 9, 1, 0, 10, 1, 0, 11, 1, 0, 12, 1, 0, 13, 1, 0, 14, 1, 0, 15, 1, 0, 65536, 1, 0, 65537, 0, 0, 65538, 0, 0, 65539, 0, 0, 65540, 0, 0, 65541, 1, 0, 65542, 1, 0, 65543, 1, 0, 65544, 1, 0, 65545, 0, 0, 65546, 0, 0, 65547, 0, 0, 65548, 0, 0, 65549, 0, 0, 65550, 0, 0, 65551, 1, 0, 131072, 1, 0, 131073, 6, 0, 131074, 0, 0, 131075, 0, 0, 131076, 0, 0, 131077, 0, 0, 131078, 0, 0, 131079, 7, 0, 131080, 8, 0, 131081, 0, 0, 131082, 0, 0, 131083, 2, 0, 131084, 0, 0, 131085, 3, 0, 131086, 0, 0, 131087, 1, 0, 196608, 1, 0, 196609, 0, 0, 196610, 3, 0, 196611, 4, 0, 196612, 0, 0, 196613, 1, 0, 196614, 1, 0, 196615, 1, 0, 196616, 1, 0, 196617, 0, 0, 196618, 0, 0, 196619, 0, 0, 196620, 4, 0, 196621, 1, 0, 196622, 1, 0, 196623, 1, 0, 262144, 1, 0, 262145, 1, 0, 262146, 1, 0, 262147, 1, 0, 262148, 1, 0, 262149, 1, 0, 262150, 0, 0, 262151, 0, 0, 262152, 0, 0, 262153, 0, 0, 262154, 1, 0, 262155, 1, 0, 262156, 1, 0, 262157, 1, 0, 262158, 5, 0, 262159, 5, 0, 327680, 5, 0, 327681, 5, 0, 327682, 5, 0, 327683, 1, 0, 327684, 0, 0, 327685, 0, 0, 327686, 3, 0, 327687, 0, 0, 327688, 3, 0, 327689, 0, 0, 327690, 1, 0, 327691, 5, 0, 327692, 5, 0, 327693, 5, 0, 327694, 5, 0, 327695, 5, 0, 393216, 5, 0, 393217, 5, 0, 393218, 5, 0, 393219, 1, 0, 393220, 0, 0, 393221, 0, 0, 393222, 0, 0, 393223, 2, 0, 393224, 0, 0, 393225, 0, 0, 393226, 1, 0, 393227, 5, 0, 393228, 5, 0, 393229, 5, 0, 393230, 5, 0, 393231, 5, 0, 458752, 5, 0, 458753, 5, 0, 458754, 5, 0, 458755, 1, 0, 458756, 1, 0, 458757, 1, 0, 458758, 1, 0, 458759, 1, 0, 458760, 1, 0, 458761, 1, 0, 458762, 1, 0, 458763, 5, 0, 458764, 5, 0, 458765, 5, 0, 458766, 5, 0, 458767, 5, 0 )
script = SubResource( 2 )
__meta__ = {
"_edit_lock_": true
}

[node name="Player" type="Node2D" parent="."]
position = Vector2( 48.6456, 49.1089 )
z_index = 10
script = SubResource( 3 )
__meta__ = {
"_edit_group_": true
}

[node name="TwinkleSprite" type="Sprite" parent="Player"]
position = Vector2( 0.208775, 0.0302658 )
texture = ExtResource( 2 )
hframes = 2

[node name="PlayerSprite" type="Sprite" parent="Player"]
texture = ExtResource( 3 )
vframes = 2
hframes = 4
frame = 4

[node name="PlayerAnimations" type="AnimationPlayer" parent="Player"]
anims/fall = SubResource( 4 )
anims/horizontal = SubResource( 5 )
anims/vertical = SubResource( 6 )

[node name="Boulders" type="Node2D" parent="."]
